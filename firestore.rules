/**
 * @fileoverview Firestore Security Rules for TriviaQuest.
 *
 * Core Philosophy: This ruleset enforces a strict user-ownership model for user profiles and their quiz history.
 * Only authenticated users can access their own data.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`.
 * - Each user's quiz history is stored in a subcollection `/users/{userId}/quiz_history/{quizHistoryId}`.
 *
 * Key Security Decisions:
 * - Users can only create their own profile using their UID.
 * - Users can only read and write their own quiz history.
 * - Listing all users is disallowed.
 *
 * Denormalization for Authorization:
 * - The `userId` is present both in the path and in the `QuizHistory` documents to ensure authorization consistency.
 *   This avoids costly `get()` operations in the rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with matching UID can create their own profile.
     * @allow (get, list, update, delete) - Authenticated user with matching UID can access their profile.
     * @deny (create) - Unauthenticated user attempts to create a profile.
     * @deny (get, list, update, delete) - Authenticated user attempts to access another user's profile.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Controls access to quiz history entries for a specific user.
     * @path /users/{userId}/quiz_history/{quizHistoryId}
     * @allow (create) - Authenticated user with matching UID can create a quiz history entry for themselves.
     * @allow (get, list, update, delete) - Authenticated user with matching UID can access their own quiz history entries.
     * @deny (create) - Unauthenticated user attempts to create a quiz history entry.
     * @deny (get, list, update, delete) - Authenticated user attempts to access another user's quiz history entries.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/quiz_history/{quizHistoryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
    }
  }
}